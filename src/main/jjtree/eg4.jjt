
options {
  MULTI=true;
  VISITOR=true;
  NODE_DEFAULT_VOID=true;
//  NODE_PREFIX="FPL";
}

PARSER_BEGIN(Eg4)

/** An Arithmetic Grammar. */
public class Eg4 {

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    Eg4 t = new Eg4(System.in);
    try {
      ASTStart n = t.Start();
      Eg4Visitor v = new Eg4DumpVisitor();
      n.jjtAccept(v, null);
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(Eg4)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

/* Reserved words and literals */

TOKEN :
{
  < PROGRAM: "program" >
|
  < HEDGE: "hedge" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

/** Main production. */
ASTStart Start() #Start : {}
{
  Program() 
  { return jjtThis; }
}

void Program()  : {}
{
    "program" <IDENTIFIER> 
    ProgramBody()
}

void ProgramBody() : {}
{
   "{" ( Hedge() )* "}"
}

void Hedge() : {} 
{
  (
    "hedge" <IDENTIFIER> "(" <IDENTIFIER> ")" FullExpression() ";"
  ) #Hedge(>1)
}

void FullExpression() : {}
{
  ( 
    Expression() 
  ) #Expr(>1)
}

/** An Expression. */
void Expression() : {}
{
  AdditiveExpression() 
}

/** An Additive Expression. */
void AdditiveExpression() : {}
{
  (
    MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
  ) #Add(>1)
}

/** A Multiplicative Expression. */
void MultiplicativeExpression() : {}
{
  (
    UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
  ) #Mult(>1)
}

/** A Unary Expression. */
void UnaryExpression() : {}
{
  "(" Expression() ")" | Identifier() | Integer()
}

/** An Identifier. */
void Identifier() #MyID :
{
  Token t;
}
{
  t=<IDENTIFIER>
  {
    jjtThis.setName(t.image);
  }
}

/** An Integer. */
void Integer() #Integer : {}
{
  <INTEGER_LITERAL>
}


