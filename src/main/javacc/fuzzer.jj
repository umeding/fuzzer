/*
 * Copyright (c) 2014 Meding Software Technik -- All Rights Reserved.
 */
PARSER_BEGIN(FuzzerParser)

package com.uwemeding.fuzzer.parser;

import com.uwemeding.fuzzer.*;

import java.io.InputStream;
import java.util.StringJoiner;

public class FuzzerParser {

    public FuzzerParser() {
    }

    /** 
     * Parse a fuzzer program file.
     * @param in is the input stream
     * @return the program
     */
    public Program parse(InputStream in) {
        try {
            FuzzerParser parser = new FuzzerParser(in);
            return parser.FuzzerProgram();
        } catch(ParseException e) {
            throw new FuzzerException("Error parsing program definitions", e);
        }
    }

    public static void main(String...av) {
        Program program = new FuzzerParser().parse(System.in);
        program.dump(System.out);
    }

}

PARSER_END(FuzzerParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* Reserved words */
{
  < PACKAGE: "package" >
| < PROGRAM: "program" >
| < HEDGE: "hedge" >
| < FUNCTION: "function" >
| < PIECEWISE: "piecewise" >
| < EXTERNAL: "external" >
| < INPUT: "input" >
| < OUTPUT: "output" >
| < STEP: "step" >
| < RULE: "rule" >
| < IS: "is" >
| < AND: "and" >
| < OR: "or" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}


TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",                // $
       "\u0041"-"\u005a",       // A-Z
       "\u005f",                // _
       "\u0061"-"\u007a"        // a-z
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039"        // 0-9
      ]
  >
}

TOKEN : // Expression
{
  < EXPRESSION : "->" (~[";"])+  >
}

TOKEN : /* SEPARATORS */
{
  < LESS: "<" >
| < GREATER: ">" >
| < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < RANGE: ".." >
| < DOT: "." >
}


/*
 * FUZZER GRAMMAR
 */

Program FuzzerProgram() :
{
Program program = null;
}
{
  [ PackageDeclaration() ]
  program = ProgramDeclaration()
  <EOF>
  {
    return program;
  }
}

void PackageDeclaration() :
{}
{
  "package" Name() ";"
}

Program ProgramDeclaration() :
{
Program program;
String programName;
}
{
  "program" programName = VariableDeclarator() "{"
  {
    program = new Program(programName);
  }
  ( ProgramBodyDeclaration(program) )* "}"
  {
    return program;
  }
}


void ProgramBodyDeclaration(Program program) :
{
String name;
String expr;
String arg;
}
{
  "hedge" name=VariableDeclarator() "("  arg=VariableDeclarator() ")" expr = Expression() ";"
  {
    program.addHedge(name, arg, expr);
  }
|
  LOOKAHEAD( "function" VariableDeclarator() "(" VariableDeclarator() ")" "piecewise" )
  "function" name=VariableDeclarator() "(" arg=VariableDeclarator() ")" "piecewise"
  {
    PiecewiseFunction pwFunc = program.addPiecewiseFunction(name, arg);
  }
  PiecewiseDeclaration(pwFunc)  "{" ( PiecewiseRange(pwFunc))* "}"
|
  LOOKAHEAD( "function" VariableDeclarator() "(" VariableDeclarator() ")" "external" )
  "function" name=VariableDeclarator() "(" arg=VariableDeclarator() ")" "external" 
  {
    ExternalFunction extFunc = program.addExternalFunction(name, arg);
  }
  ExternalFunctionDeclaration(extFunc) ";"
| 
  "input" FuzzyVariableDeclaration(program, true)
| 
  "output" FuzzyVariableDeclaration(program, false)
| 
  "rule" FuzzyRule(program) 
}

/*
 * Extract the piecewise declarations
 */
void PiecewiseDeclaration(PiecewiseFunction pwFunc) :
{
String var;
}
{
  var = VariableDeclarator()
  {
    pwFunc.addParameter(var);
  }
  ( "," var = VariableDeclarator() 
  {
    pwFunc.addParameter(var);
  }
  )*
}

void PiecewiseRange(PiecewiseFunction pwFunc) :
{
String from, to, expr;
}
{
  LOOKAHEAD( ".." <IDENTIFIER>)
  ".." to=VariableDeclarator() expr=Expression() ";"
  {
    pwFunc.add("<", to, expr);
  }
|
  LOOKAHEAD(<IDENTIFIER>  ".." <IDENTIFIER>)
  from=VariableDeclarator() ".." to=VariableDeclarator() expr=Expression() ";"
  {
    pwFunc.add(from, to, expr);
  }
|
  LOOKAHEAD(<IDENTIFIER>  "..")
  from=VariableDeclarator() ".." expr=Expression() ";"
  {
    pwFunc.add(from, ">", expr);
  }
}

/*
 * External function reference
 */
void ExternalFunctionDeclaration(ExternalFunction extFunc) :
{
String name;
String var;
}
{
  name=Name() "(" var=VariableDeclarator() ")" 
  {
    extFunc.setupClassReference(name, var);
  }
}

/*
 * Fuzzy variable delaration
 */
void FuzzyVariableDeclaration(Program program, boolean isInput) :
{
String name;
Number from, to, step;
Variable var;
}
{
  name=VariableDeclarator() "(" from=NumberReference() <RANGE> to=NumberReference() "step" step=NumberReference() ")"
  {
    var = isInput ? program.addInput(name, from, to, step) : program.addOutput(name, from, to, step);
  }
  "{" (MemberDefinition(program, var))* "}"
}

void MemberDefinition(Program program, Variable var) :
{
String name;
Member member;
}
{
  LOOKAHEAD(<IDENTIFIER> "=" "{")
  name=VariableDeclarator() "=" 
  {
    member = var.addMember(name);
  }
  (MemberStep(member))+ ";"
|
  LOOKAHEAD(<IDENTIFIER> "=" <IDENTIFIER>)
  name=VariableDeclarator() "=" FunctionCall(program, name) ";"
}

void MemberStep(Member member) :
{
Number x, y;
}
{
  "{" x=NumberReference() ("," | ";" | ":")? y=NumberReference() "}" 
  {
    member.add(x, y);
  }
}

void FunctionCall(Program program, String memberName) :
{
String functionName;
Function function;
FunctionCall call;
}
{
  functionName=VariableDeclarator()
  {
    function = program.getFunction(functionName);
    call = new FunctionCall(function);
  }
  "(" (NumberParameters(call))+ ")"
}

/*
 * Fuzzy rule
 */
void FuzzyRule(Program program) :
{
String name;
Rule rule;
Node condition;
}
{
  name=VariableDeclarator() condition=RuleCondition(program)
  {
    rule = program.addRule(name, condition);
  }
  "{" "}"
}

Node RuleCondition(Program program) :
{
String varName;
String memberName;
String hedge = null;
Node left, right;
}
{
  left=InSetCondition()
  {
    return left;
  }
|
  "(" left=RuleCondition(program) ("and" | "or") right=RuleCondition(program) ")" 
  {
    String join = getToken(2).image;
    switch(join) {
    case "and":
        return Conditions.createAndCondition(left, right);
    case "or":
        return Conditions.createOrCondition(left, right);
    default:
        throw generateParseException();
    }
  } 
  
}

Node InSetCondition() :
{
String varName;
String memberName;
String hedge = null;
}
{
  LOOKAHEAD(5)
  "(" varName=VariableDeclarator() "is" hedge=VariableDeclarator() memberName=VariableDeclarator() ")"
  {
    Variable var = program.getInput(varName);
    Member member = var.getMember(memberName);
    return Conditions.createInCondition(var, member);
  }
|
  LOOKAHEAD(4)
  "(" varName=VariableDeclarator() "is" memberName=VariableDeclarator() ")"
  {
    Variable var = program.getInput(varName);
    Member member = var.getMember(memberName);
    return Conditions.createInCondition(var, member);
  }
}


/*
 * Parse a sequence of numbers
 */
void NumberParameters(FunctionCall call) :
{
Number parameter;
}
{
  parameter=NumberReference()
  {
    call.bindParameter(parameter);
  }
  (
    "," parameter=NumberReference()
    {
      call.bindParameter(parameter);
    }
  )*
}

/*
 * A variable name
 */
String VariableDeclarator() :
{}
{
  <IDENTIFIER>
  {
    return getToken(0).image;
  }
}

Number NumberReference() :
{
boolean haveSign = false;
Number number;
}
{
  (
    "-"
    {
      haveSign = true;
    }

  )?
  number=UnsignedNumberReference()
  {
    return haveSign ? -number.doubleValue() : number;
  }
}
Number UnsignedNumberReference() :
{}
{
  <INTEGER_LITERAL>
  {
    return Double.parseDouble(getToken(0).image);
  }
|
  <FLOATING_POINT_LITERAL>
  {
    return Double.parseDouble(getToken(0).image);
  }
}

String Expression() :
{}
{
  <EXPRESSION>
  {
    String expr = getToken(0).image.substring(2).trim();
    return expr;
  }
}

/*
 * Extract a fully-qualified name
 */
String Name() :
{
String name;
StringJoiner sj = new StringJoiner(".");
}
{
  name=VariableDeclarator()
  {
    sj.add(name);
  }
  ( "." name=VariableDeclarator()
  {
    sj.add(name);
  }
  )*
  {
    return sj.toString();
  }
}

void NameList() :
{}
{
  Name()
  ( "," Name()
  )*
}


